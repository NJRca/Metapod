"""
Templates for Metapod agent
"""

from typing import Dict, List


class PRTemplate:
    """RFC-compliant PR template for refactoring changes"""
    
    @staticmethod
    def generate(
        summary: str,
        modules_affected: List[str],
        behavior_preserved: bool,
        architecture_changes: Dict[str, str],
        security_items: List[str],
        reliability_changes: List[str],
        observability_updates: List[str],
        test_updates: List[str],
        performance_data: Dict[str, str],
        release_plan: Dict[str, str]
    ) -> str:
        """Generate complete PR description"""
        
        return f"""## Summary
{summary}

**Risk Level:** {release_plan.get('risk_level', 'Medium')}
**Blast Radius:** {release_plan.get('blast_radius', 'Limited to modified modules')}

## Scope
- **Modules/files:** {', '.join(modules_affected)}
- **Behavior preserved?** {'Y' if behavior_preserved else 'N'}
- **Breaking changes:** {'N' if behavior_preserved else 'Y - see migration guide'}

## Architecture
- **Ports added/changed:** {architecture_changes.get('ports', 'None')}
- **Repos/transactions:** {architecture_changes.get('repositories', 'None')}  
- **Error model → problem+json mapping:** {architecture_changes.get('error_model', 'RFC 9457 implemented')}
- **Dependency injection:** {architecture_changes.get('di', 'Improved separation')}

## Security
- **ASVS/API Top 10 items addressed:** {', '.join(security_items) if security_items else 'Input validation, error handling'}
- **Secrets/roles/policies touched:** {architecture_changes.get('security_changes', 'None')}
- **Input validation:** Enhanced at all API boundaries
- **Authentication/Authorization:** {architecture_changes.get('auth_changes', 'No changes')}

## Reliability  
- **Timeouts/retries/backoff/breakers added:** {', '.join(reliability_changes)}
- **Idempotency keys/semantics:** {architecture_changes.get('idempotency', 'Preserved existing behavior')}
- **Graceful degradation:** {architecture_changes.get('degradation', 'Fail-safe patterns added')}
- **Resource limits:** {architecture_changes.get('limits', 'Connection pooling maintained')}

## Observability
- **Logs/metrics/traces added/updated:** {', '.join(observability_updates)}
- **Dashboards/alerts:** {architecture_changes.get('monitoring', 'Compatible with existing')}
- **Correlation IDs:** Added to all request flows
- **Performance metrics:** RED metrics (Rate, Errors, Duration) instrumented

## Testing
- **Characterization tests:** {test_updates[0] if test_updates else 'Added for critical paths'}
- **Unit/Property/Contract tests:** {test_updates[1] if len(test_updates) > 1 else 'Updated and expanded'}
- **e2e/Smoke:** {test_updates[2] if len(test_updates) > 2 else 'Validated existing scenarios'}
- **Coverage impact:** {performance_data.get('coverage_change', '+5% coverage')}

## Performance
- **Before/After p95 & error rate:** {performance_data.get('performance_comparison', 'No regression detected')}
- **Memory usage:** {performance_data.get('memory', 'No significant change')}
- **Budgets enforced in CI:** {performance_data.get('budgets', 'Performance budgets maintained')}
- **Load testing:** {performance_data.get('load_test', 'Smoke tested locally')}

## Release
- **Feature flags:** {release_plan.get('feature_flags', 'None required - backwards compatible')}
- **Rollout steps:** {release_plan.get('rollout_steps', '1. Deploy, 2. Monitor, 3. Validate')}
- **Rollback plan:** {release_plan.get('rollback_plan', 'Standard deployment rollback via CI/CD')}
- **Monitoring:** {release_plan.get('monitoring_plan', 'Monitor error rates and response times for 24h')}

## Research Notes
- Implementation follows current best practices from official documentation
- Architecture patterns based on Hexagonal Architecture principles
- Error handling compliant with RFC 9457 Problem Details standard
- Security measures aligned with OWASP API Security Top 10

## Validation Checklist
- [ ] All tests pass (unit, integration, contract)
- [ ] Security scan clean (SAST, dependency check, secrets)
- [ ] Performance within acceptable bounds
- [ ] Documentation updated
- [ ] Rollback plan tested
- [ ] Feature flags configured (if applicable)
- [ ] Monitoring alerts configured
- [ ] Team review completed

## Post-Deployment
- [ ] Monitor error rates for 24h
- [ ] Validate performance metrics
- [ ] Confirm observability data flowing
- [ ] Rollback if any issues detected

---
**Generated by Metapod Autonomous Refactoring Agent**
*Following strict architectural and security standards*
"""


class TODOTemplate:
    """Standard TODO template for tracking progress"""
    
    @staticmethod
    def generate_initial_todo() -> str:
        """Generate initial TODO list"""
        return """```
TODO - Metapod Refactoring Session:
⏳ Scope & acceptance criteria confirmed
⏳ Baseline tests/telemetry in place  
⏳ Plan approved (small reversible cuts)
⏳ Implement step 1 (inputs validated, errors standardized)
⏳ Tests green (unit/contract/property)
⏳ Observability updated (logs/metrics/traces)
⏳ PR opened with checklist & research notes
⏳ Rollout plan & rollback documented
```"""
    
    @staticmethod
    def update_todo(completed_tasks: List[str]) -> str:
        """Update TODO with completed tasks"""
        tasks = [
            "Scope & acceptance criteria confirmed",
            "Baseline tests/telemetry in place",
            "Plan approved (small reversible cuts)", 
            "Implement step 1 (inputs validated, errors standardized)",
            "Tests green (unit/contract/property)",
            "Observability updated (logs/metrics/traces)",
            "PR opened with checklist & research notes",
            "Rollout plan & rollback documented"
        ]
        
        todo_lines = []
        for task in tasks:
            if task in completed_tasks:
                todo_lines.append(f"✅ {task}")
            else:
                todo_lines.append(f"⏳ {task}")
        
        return "```\nTODO - Metapod Refactoring Session:\n" + "\n".join(todo_lines) + "\n```"


class CommitMessageTemplate:
    """Conventional commit message templates"""
    
    @staticmethod
    def refactor_commit(scope: str, description: str) -> str:
        """Generate refactor commit message"""
        return f"refactor({scope}): {description}\n\n- Apply hexagonal architecture patterns\n- Implement RFC 9457 error handling\n- Add comprehensive input validation\n- Enhance observability and reliability"
    
    @staticmethod
    def feat_commit(scope: str, description: str) -> str:
        """Generate feature commit message"""
        return f"feat({scope}): {description}\n\n- Add new functionality following established patterns\n- Include comprehensive test coverage\n- Maintain backwards compatibility"
    
    @staticmethod
    def fix_commit(scope: str, description: str) -> str:
        """Generate fix commit message"""
        return f"fix({scope}): {description}\n\n- Address identified issue\n- Add regression test\n- Maintain API compatibility"


class ArchitectureDocTemplate:
    """Architecture decision record template"""
    
    @staticmethod
    def generate_adr(
        title: str,
        status: str,
        context: str,
        decision: str,
        consequences: str
    ) -> str:
        """Generate Architecture Decision Record"""
        return f"""# ADR: {title}

**Status:** {status}
**Date:** 2025-08-20
**Generated by:** Metapod Autonomous Agent

## Context
{context}

## Decision
{decision}

## Consequences
{consequences}

## Implementation Notes
- This decision was made as part of autonomous refactoring
- Implementation follows established patterns and best practices
- All changes are backwards compatible unless noted
- Comprehensive testing validates the implementation

## References
- RFC 9457: Problem Details for HTTP APIs
- OWASP API Security Top 10
- Hexagonal Architecture principles
- Clean Architecture patterns
"""


class RunbookTemplate:
    """Operational runbook template"""
    
    @staticmethod
    def generate_runbook(service_name: str, changes: List[str]) -> str:
        """Generate operational runbook for changes"""
        return f"""# {service_name} - Post-Refactor Runbook

## Overview
This runbook covers operational procedures after Metapod autonomous refactoring.

## Changes Made
{chr(10).join(f'- {change}' for change in changes)}

## Health Checks
- **Application Health:** `GET /health`
- **Readiness Check:** `GET /ready` 
- **Metrics Endpoint:** `GET /metrics`

## Key Metrics to Monitor
- **Request Rate:** requests/second
- **Error Rate:** 4xx/5xx responses
- **Response Time:** p50, p95, p99 latencies
- **Resource Usage:** CPU, memory, connections

## Alert Thresholds  
- Error rate > 1% for 5 minutes
- P95 latency > 500ms for 5 minutes
- Memory usage > 80% for 10 minutes
- CPU usage > 70% for 10 minutes

## Troubleshooting

### High Error Rates
1. Check application logs for error patterns
2. Verify external dependencies are healthy
3. Check database connection pool status
4. Review recent deployments

### High Latency
1. Check database query performance
2. Verify external service response times  
3. Review cache hit rates
4. Check for resource contention

### Rollback Procedure
1. Trigger rollback via CI/CD pipeline
2. Monitor error rates during rollback
3. Verify application health after rollback
4. Document incident for post-mortem

## Emergency Contacts
- On-call Engineer: [Team-specific contact]
- Platform Team: [Platform-specific contact]
- Database Team: [DB-specific contact]

---
**Generated by Metapod Autonomous Refactoring Agent**
"""


# Template registry
TEMPLATES = {
    "pr": PRTemplate,
    "todo": TODOTemplate, 
    "commit": CommitMessageTemplate,
    "adr": ArchitectureDocTemplate,
    "runbook": RunbookTemplate
}
